name: Build executable

on:
  workflow_dispatch:
    inputs:
      mode:
        type: choice
        description: Semantic versioning
        options:
          - patch
          - minor
          - major
        required: true

permissions:
  contents: write
  id-token: write

jobs:
  Increment-version-number:
    name: Increment Version
    runs-on: [self-hosted, linux]
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Set version
        id: version
        uses: 4eDimension/Tools/.github/actions/package-set-version@main
        with:
          mode: ${{ inputs.mode }}

  Build-Client-on-Mac:
    name: Build macOS Client
    needs: Increment-version-number
    runs-on: [self-hosted, macOS]
    env:
      APPNAME: ${{ vars.APPNAME }}
      VERSION4D: ${{ vars.VERSION4D }}
    steps:
      - uses: actions/checkout@v4

      - name: Checkout Tools
        uses: actions/checkout@v4
        with:
          repository: 4eDimension/Tools
          token: ${{ secrets.TARGET_TOKEN_GITHUB }}
          ref: ${{ vars.VERSION4D }}
          path: tools

      - name: Build client mac
        id: backend
        shell: bash
        run: |
          BUILDNUMBER="${{ needs.Increment-version-number.outputs.version }}"
          TOOL="${GITHUB_WORKSPACE}/tools/tool4d_mac/tool4d.app/Contents/MacOS/tool4d"
          PROJECT="${GITHUB_WORKSPACE}/Project/${{ vars.APPNAME }}.4DProject"
          OUTPUT="${GITHUB_WORKSPACE}/Build"
          PARAM="{\"projectPath\":\"$PROJECT\",\"verbose\":true,\"buildClient\":true,\"buildServer\":false,\"buildNumber\":\"$BUILDNUMBER\",\"output\":\"$OUTPUT\"}"

          "$TOOL" --dataless -s "${GITHUB_WORKSPACE}/tools/Build_Application/Project/Build_Application.4DProject" --user-param "$PARAM"

      - name: Setup private key
        run: echo "${{ secrets.PRIVATE_KEY }}" > private_key.pem

      - name: Decrypt file
        run: |
          chmod 600 private_key.pem
          openssl pkeyutl -decrypt -inkey private_key.pem -in ../../key.enc -out key_decrypted.txt
          KEYCHAIN_PASSWORD=$(cat key_decrypted.txt)
          echo "::add-mask::$KEYCHAIN_PASSWORD" # Masque la valeur dans les logs
          echo "KEYCHAIN_PASSWORD=$KEYCHAIN_PASSWORD" >> $GITHUB_ENV
    
      - name: Setup keychain 
        id: keychain
        uses: 4eDimension/Tools/.github/actions/deployment-setup-keychain@main
        with:
          APPLE_DEVELOPER_ID_CERTIFICATE: ${{ secrets.APPLE_DEVELOPER_ID_CERTIFICATE }}
          APPLE_DEVELOPER_ID_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_DEVELOPER_ID_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ env.KEYCHAIN_PASSWORD }}

      - name: Unlock keychain
        id: unlock
        run: security unlock-keychain -p ${{ env.KEYCHAIN_PASSWORD }}
        shell: bash

      - name: Detect .app name Client
        id: detect_app_client
        run: |
          cd "${GITHUB_WORKSPACE}/Build/Client"
          app_name=$(ls -d *.app | head -n 1)
          echo "APP_NAME=$app_name" >> $GITHUB_OUTPUT
          dmg_name="${app_name%.app}.dmg"
          echo "DMG_NAME=$dmg_name" >> $GITHUB_OUTPUT
        shell: bash

      - name: Codesign & notaryze Client for Mac
        id: codesignClient
        uses: 4eDimension/Tools/.github/actions/deployment-codesign-product@main
        with: 
          sign: ${{ secrets.CODESIGN_APPLE_ID }} 
          apple_id: ${{ secrets.NOTARYTOOL_APPLE_ID }}         
          team_id: ${{ secrets.NOTARYTOOL_TEAM_ID }}
          password: ${{ secrets.NOTARYTOOL_PASSWORD }}
          product_path: ${{ github.workspace }}/Build/Client/${{ steps.detect_app_client.outputs.APP_NAME }}
          dmg_path: ${{ github.workspace }}/Build/Client/${{ steps.detect_app_client.outputs.DMG_NAME }}
          keychain: ${{ steps.keychain.outputs.KEYCHAIN_PATH }}

      - name: Rename archive and upload to FTP
        shell: cmd
        run: |
          ZIPNAME=${{ vars.APPNAME }}_ClientWin_${{ vars.VERSION4D }}_${{ needs.Increment-version-number.outputs.version }}.zip"
          mv "${GITHUB_WORKSPACE}\Build\Client\update.mac.4darchive" "${GITHUB_WORKSPACE}\Build\Client\$ZIPNAME"
          curl --ftp-ssl-reqd --user ${{ secrets.FTP_PRIVATE_LOGIN }}:'${{ secrets.FTP_PRIVATE_PASSWORD }}' --upload-file ${GITHUB_WORKSPACE}/Build/Client/$ZIPNAME ${{ secrets.FTP_PRIVATE_PATH }}
        
        env:
          FTP_PRIVATE_LOGIN: ${{ secrets.FTP_PRIVATE_LOGIN }}
          FTP_PRIVATE_PASSWORD: ${{ secrets.FTP_PRIVATE_PASSWORD }}
          FTP_PRIVATE_PATH: ${{ secrets.FTP_PRIVATE_PATH }}

  Build-Client-Server-on-Win:
    name: Build Windows Client + Server
    needs: 
      - Increment-version-number
      - Build-Client-on-Mac
    runs-on: [self-hosted, windows]
    env:
      APPNAME: ${{ vars.APPNAME }}
      VERSION4D: ${{ vars.VERSION4D }}
    steps:
      - uses: actions/checkout@v4

      - name: Copy tools in runner
        id: checkout_tools
        uses: actions/checkout@v4
        with:
          repository: 4eDimension/Tools
          token: ${{ secrets.TARGET_TOKEN_GITHUB }}
          ref: ${{ vars.VERSION4D }}
          path: tools

      - name: Download and delete FTP file
        shell: cmd
        run: |
          SET "FILE_NAME"="${{ vars.APPNAME }}_ClientWin_${{ vars.VERSION4D }}_${{ needs.Increment-version-number.outputs.version }}.zip"
          SET "LOCAL_PATH"="%WORKSPACE%/Build/update.mac.4darchive"
          SET "REMOTE_URL"="${{ secrets.FTP_PRIVATE_PATH }}$FILE_NAME"

          echo "== Téléchargement du fichier =="
          mkdir -p "%WORKSPACE%/Build"

          curl --ftp-ssl-reqd \
            --user %FTP_PRIVATE_LOGIN%:"%FTP_PRIVATE_PASSWORD%" \
            --output "$LOCAL_PATH" "$REMOTE_URL"

          echo "== Copie vers le dossier output =="
          mkdir -p "%WORKSPACE%/output"
          cp "$LOCAL_PATH" "%WORKSPACE%/output/$FILE_NAME"

          echo "== Suppression du fichier distant =="
          curl --ftp-ssl-reqd \
            --user %FTP_PRIVATE_LOGIN%:"%FTP_PRIVATE_PASSWORD%" \
            --quote "CWD /%FTP_PRIVATE_SHORT_PATH%" \
            --quote "DELE $FILE_NAME" \
            ftp://%FTP_PRIVATE_SERVER%:2121
          
        env:
          FTP_PRIVATE_LOGIN: ${{ secrets.FTP_PRIVATE_LOGIN }}
          FTP_PRIVATE_PASSWORD: ${{ secrets.FTP_PRIVATE_PASSWORD }}
          FTP_PRIVATE_PATH: ${{ secrets.FTP_PRIVATE_PATH }}
          FTP_PRIVATE_SHORT_PATH: ${{ secrets.FTP_PRIVATE_SHORT_PATH }}
          FTP_PRIVATE_SERVER: ${{ secrets.FTP_PRIVATE_SERVER }}

      - name: Build client & server windows
        id: backend
        shell: cmd
        run: |
          REM === Définir les chemins ===
          SET "WORKSPACE=%GITHUB_WORKSPACE%"
          SET "PROJECTFILE=%WORKSPACE%\Project\${{ vars.APPNAME }}.4DProject"
          SET "OUTPUTDIR=%WORKSPACE%\Build"
          SET "BUILDNUMBER=${{ needs.Increment-version-number.outputs.version }}"

          REM === Échapper les chemins pour JSON (\\ au lieu de \) ===
          SET "PROJECTFILE_JSON=%PROJECTFILE:\=\\%"
          SET "OUTPUTDIR_JSON=%OUTPUTDIR:\=\\%"

          REM === Construire le JSON pour --user-param ===
          SET "USERPARAM={\"projectPath\":\"%PROJECTFILE_JSON%\",\"verbose\":true,\"buildClient\":true,\"buildServer\":true,\"buildNumber\":\"%BUILDNUMBER%\",\"output\":\"%OUTPUTDIR_JSON%\"}"

          REM === Exécuter Tool4D ===
          "%WORKSPACE%\tools\tool4d_win\tool4d.exe" --dataless -s "%WORKSPACE%\tools\Build_Application\Project\Build_Application.4DProject" --user-param "%USERPARAM%"

      - name: Rename archive and upload to FTP
        shell: cmd
        run: |
          set "ZIPNAME=%APPNAME%_ClientWin_%VERSION4D%_${{ needs.Increment-version-number.outputs.version }}.zip"
          move "%GITHUB_WORKSPACE%\Build\Client\update.win.4darchive" "%GITHUB_WORKSPACE%\output\%ZIPNAME%"
          cd "%GITHUB_WORKSPACE%\Build\Server\"
          "c:\Program Files\7-Zip\7z.exe" a "${{ github.workspace }}/output/${{ vars.APPNAME }}_ServerWin_${{ vars.VERSION4D }}_${{ needs.Increment-version-number.outputs.version }}.zip" *

      - name: Upload assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ github.workspace }}/output/*
          tag: ${{ needs.Increment-version-number.outputs.version }}
          body: ${{ vars.APPNAME }} v${{ needs.Increment-version-number.outputs.version }} (compiled for Intel and Silicon)
          file_glob: true

      - name: Cleaning
        run: |
          rm -r ${{ github.workspace }}/output
          rm -r ${{ github.workspace }}/Build
        shell: bash

  Update-Badges:
    name: Update Badges
    needs: [Build-Client-Server-on-Mac]
    runs-on: [self-hosted, linux]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm install

      - name: Get version
        id: version
        run: |
          git pull origin main
          version=`cat package.json | jq -r '.version'`
          echo "version=${version}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Get repository name
        run: echo "REPO_NAME=$(echo "$GITHUB_REPOSITORY" | cut -d'/' -f2)" >> $GITHUB_ENV

      - name: Update Version Badge
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ vars.GISTID }}
          filename: release_${{ env.REPO_NAME }}.json
          label: Version
          message: ${{ steps.version.outputs.version }}
          color: blue

      - name: Total downloads of release versions
        id: downloads
        run: |
          set -e
          total_downloads=$(curl -L -H 'Accept: application/vnd.github+json' -H 'Authorization: Bearer ${{ secrets.TARGET_TOKEN_GITHUB }}' -H 'X-GitHub-Api-Version: 2022-11-28' https://api.github.com/repos/4eDimension/${{ vars.APPNAME }}/releases | egrep 'download_count'  | cut '-d:' -f 2 | sed 's/,/+/' | xargs echo  | xargs -I N echo N 0  | bc || echo 0) 
          if [ -z "${total_downloads}" ]; then total_downloads=0; fi
          echo "total_downloads=${total_downloads}" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Update download badge
        if: success()
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_SECRET }}  
          gistID: ${{ vars.GISTID }}
          filename: download_${{ env.REPO_NAME }}.json
          label: Downloads
          message: ${{ steps.downloads.outputs.total_downloads }}
          color: green
          forceUpdate: true